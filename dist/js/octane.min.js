define(["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Factory = exports.Factory = function Factory() {
    _classCallCheck(this, Factory);
  };

  ;
});
define(['exports'], function (exports) {
				'use strict';

				Object.defineProperty(exports, "__esModule", {
								value: true
				});

				function _classCallCheck(instance, Constructor) {
								if (!(instance instanceof Constructor)) {
												throw new TypeError("Cannot call a class as a function");
								}
				}

				var _createClass = function () {
								function defineProperties(target, props) {
												for (var i = 0; i < props.length; i++) {
																var descriptor = props[i];
																descriptor.enumerable = descriptor.enumerable || false;
																descriptor.configurable = true;
																if ("value" in descriptor) descriptor.writable = true;
																Object.defineProperty(target, descriptor.key, descriptor);
												}
								}

								return function (Constructor, protoProps, staticProps) {
												if (protoProps) defineProperties(Constructor.prototype, protoProps);
												if (staticProps) defineProperties(Constructor, staticProps);
												return Constructor;
								};
				}();

				var Foreman = exports.Foreman = function () {
								function Foreman(script) {
												_classCallCheck(this, Foreman);

												if (!script) throw new Error('You must supply a script to execute!');
												this._script = script;

												return this;
								}

								_createClass(Foreman, [{
												key: 'start',
												value: function start() {
																this._worker = new Worker(this._script);
																this._worker.postMessage({
																				command: 'start'
																});
																return this;
												}
								}, {
												key: 'stop',
												value: function stop() {
																this._worker.postMessage({
																				command: 'stop'
																});
																return this;
												}
								}, {
												key: 'send',
												value: function send(data) {
																this._worker.postMessage({
																				command: 'data',
																				data: data
																});
																return this;
												}
								}, {
												key: 'on',
												value: function on(name, handler) {
																this._worker.addEventListener('message', function (message) {
																				if (name === message.command) {
																								handler(message.data);
																				}
																}, false);
																return this;
												}
								}, {
												key: 'off',
												value: function off(name) {
																this._worker.removeEventListener('message');
																return this;
												}
								}]);

								return Foreman;
				}();

				;
});
define(["exports", "factory", "ui/surface", "data/tanker", "pipeline", "registry", "foreman"], function (exports, _factory, _surface, _tanker, _pipeline, _registry2, _foreman) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Octane = undefined;

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];
				descriptor.enumerable = descriptor.enumerable || false;
				descriptor.configurable = true;
				if ("value" in descriptor) descriptor.writable = true;
				Object.defineProperty(target, descriptor.key, descriptor);
			}
		}

		return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);
			if (staticProps) defineProperties(Constructor, staticProps);
			return Constructor;
		};
	}();

	var _registry = new _registry2.Registry();

	var Octane = exports.Octane = function () {
		function Octane() {
			_classCallCheck(this, Octane);
		}

		_createClass(Octane, [{
			key: "Factory",
			get: function get() {
				return _factory.Factory;
			}
		}, {
			key: "Pipeline",
			get: function get() {
				return _pipeline.Pipeline;
			}
		}, {
			key: "Tanker",
			get: function get() {
				return Tanker;
			}
		}, {
			key: "Surface",
			get: function get() {
				return _surface.Surface;
			}
		}, {
			key: "Foreman",
			get: function get() {
				return _foreman.Foreman;
			}
		}]);

		return Octane;
	}();

	;
});
define(['exports', 'pubsub'], function (exports, _pubsub) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Pipeline = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Pipeline = exports.Pipeline = function (_PubSub) {
    _inherits(Pipeline, _PubSub);

    function Pipeline() {
      _classCallCheck(this, Pipeline);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Pipeline).apply(this, arguments));
    }

    return Pipeline;
  }(_pubsub.PubSub);

  ;
});
define(['exports', 'registry'], function (exports, _registry) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.PubSub = undefined;

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];
				descriptor.enumerable = descriptor.enumerable || false;
				descriptor.configurable = true;
				if ("value" in descriptor) descriptor.writable = true;
				Object.defineProperty(target, descriptor.key, descriptor);
			}
		}

		return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);
			if (staticProps) defineProperties(Constructor, staticProps);
			return Constructor;
		};
	}();

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}

		return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
		}

		subClass.prototype = Object.create(superClass && superClass.prototype, {
			constructor: {
				value: subClass,
				enumerable: false,
				writable: true,
				configurable: true
			}
		});
		if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var PubSub = exports.PubSub = function (_Registry) {
		_inherits(PubSub, _Registry);

		function PubSub() {
			_classCallCheck(this, PubSub);

			return _possibleConstructorReturn(this, Object.getPrototypeOf(PubSub).apply(this, arguments));
		}

		_createClass(PubSub, [{
			key: 'trigger',
			value: function trigger() {}
		}, {
			key: 'on',
			value: function on() {}
		}, {
			key: 'off',
			value: function off() {}
		}]);

		return PubSub;
	}(_registry.Registry);

	;
});
define(["exports"], function (exports) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];
				descriptor.enumerable = descriptor.enumerable || false;
				descriptor.configurable = true;
				if ("value" in descriptor) descriptor.writable = true;
				Object.defineProperty(target, descriptor.key, descriptor);
			}
		}

		return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);
			if (staticProps) defineProperties(Constructor, staticProps);
			return Constructor;
		};
	}();

	var Registry = exports.Registry = function () {
		function Registry() {
			_classCallCheck(this, Registry);

			this._map = {};
		}

		_createClass(Registry, [{
			key: "register",
			value: function register(type, key, handler) {
				if (!type) return;

				if (!this._map[type]) {
					this._map[type] = [];
				}

				this._map[type].push({
					key: key,
					handler: handler
				});
			}
		}, {
			key: "unregister",
			value: function unregister(type, key) {
				if (!type) return;

				var handlers = this._map[type];
				var i = handlers.length - 1;
				var handler;

				while (i--) {
					if (key === handlers[i].key) {
						this._map.splice(i, 1);
						break;
					}
				}
			}
		}]);

		return Registry;
	}();

	;
});
define(["exports"], function (exports) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var Util = exports.Util = {
		inherit: function inherit() {
			if (!arguments.length) return;
			if (arguments.length == 1) return arguments[0];

			var ctors = Array.prototype.slice.call(arguments);
			var ctor = ctors.shift();
			var cproto;

			ctors.reverse();

			ctors.forEach(function (c) {
				cproto = c.prototype;
				Object.getOwnPropertyNames(cproto).forEach(function (key) {
					ctor.prototype[key] = cproto[key];
				});
			});

			return ctor;
		}
	};
});
define(["exports"], function (exports) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];
				descriptor.enumerable = descriptor.enumerable || false;
				descriptor.configurable = true;
				if ("value" in descriptor) descriptor.writable = true;
				Object.defineProperty(target, descriptor.key, descriptor);
			}
		}

		return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);
			if (staticProps) defineProperties(Constructor, staticProps);
			return Constructor;
		};
	}();

	var Tanker = exports.Tanker = function () {
		function Tanker() {
			_classCallCheck(this, Tanker);
		}

		_createClass(Tanker, [{
			key: "init",
			value: function init() {}
		}]);

		return Tanker;
	}();

	;
});
define(['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var DataProvider = exports.DataProvider = function () {
        function DataProvider(data) {
            _classCallCheck(this, DataProvider);

            this._data = data || {};
            this._map = new WeakMap([]);
            this._keys = [];
        }

        _createClass(DataProvider, [{
            key: 'bind',
            value: function bind(listener) {
                this._keys[listener];
                this._map.set(listener, '');
            }
        }, {
            key: '_iterateListenersForDataUpdate',
            value: function _iterateListenersForDataUpdate(changedData) {
                var i = 0;
                var o;
                for (; i < this._keys.length; i++) {
                    o = this._map[this._keys[i]];
                    if (o) {
                        if (o.onChange) {
                            o.onChange(changedData);
                        } else {
                            throw new Error('Listener does not expose onChange handler!');
                        }
                    } else {
                        delete this._keys[l];
                    }
                }
            }
        }, {
            key: 'setData',
            value: function setData(name, value) {
                if (this._data[name] && this._data[name] !== value) {
                    this._data[name] = value;

                    this._iterateListenersForDataUpdate({}[name] = value);
                }
            }
        }, {
            key: 'data',
            value: function data() {
                return this._data;
            }
        }]);

        return DataProvider;
    }();

    ;
});
define(['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var Repository = exports.Repository = function () {
        _createClass(Repository, [{
            key: 'data',
            get: function get() {
                return this._data;
            }
        }]);

        function Repository(data) {
            _classCallCheck(this, Repository);

            this._data = data || {};
        }

        _createClass(Repository, [{
            key: 'read',
            value: function read(props) {
                var out = {};
                var i;
                var p;

                if (typeof props === 'string') {
                    props = [props];
                }

                for (i = 0; i < props.length; i++) {
                    p = props[i];
                    out[p] = this._data[p];
                }

                return out;
            }
        }, {
            key: 'defineSchema',
            value: function defineSchema(name, otions) {
                options = options || {};
            }
        }, {
            key: 'getConduit',
            value: function getConduit() {}
        }]);

        return Repository;
    }();

    ;
});
define(['exports', '../ui/iom/iomnode'], function (exports, _iomnode) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Surface = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var Surface = exports.Surface = function (_IomNode) {
        _inherits(Surface, _IomNode);

        function Surface() {
            _classCallCheck(this, Surface);

            return _possibleConstructorReturn(this, Object.getPrototypeOf(Surface).apply(this, arguments));
        }

        return Surface;
    }(_iomnode.IomNode);

    ;
});
define(["exports"], function (exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var consts = exports.consts = {
        NODETYPES: {
            IOM: 0,
            EMPTY: 1,
            TEXT: 2
        }
    };
});
define(['exports', '../../ui/iom/iomnode', '../../ui/iom/consts'], function (exports, _iomnode, _consts) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.EmptyNode = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var EmptyNode = exports.EmptyNode = function (_IomNode) {
        _inherits(EmptyNode, _IomNode);

        function EmptyNode() {
            _classCallCheck(this, EmptyNode);

            var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(EmptyNode).call(this));

            _this._type = _consts.consts.NODETYPES.TEXT;
            return _this;
        }

        _createClass(EmptyNode, [{
            key: 'render',
            value: function render() {
                return '';
            }
        }]);

        return EmptyNode;
    }(_iomnode.IomNode);

    ;
});
define(['exports', '../../ui/iom/consts'], function (exports, _consts) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.IomNode = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var IomNode = exports.IomNode = function () {
        _createClass(IomNode, [{
            key: 'name',
            get: function get() {
                return this._name;
            },
            set: function set(val) {
                this._name = val;
            }
        }, {
            key: 'children',
            get: function get() {
                return this._children;
            },
            set: function set(val) {
                this._children = val;
            }
        }, {
            key: 'type',
            get: function get() {
                return this._type;
            }
        }]);

        function IomNode(name) {
            _classCallCheck(this, IomNode);

            this.name = name;
            this.children = [];
            this._type = _consts.consts.NODETYPES.IOM;
        }

        return IomNode;
    }();

    ;
});
define(['exports', '../../ui/iom/iomnode', '../../ui/iom/consts'], function (exports, _iomnode, _consts) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.TextNode = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var TextNode = exports.TextNode = function (_IomNode) {
        _inherits(TextNode, _IomNode);

        function TextNode(text) {
            _classCallCheck(this, TextNode);

            var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextNode).call(this));

            _this._text = text;
            _this._type = _consts.consts.NODETYPES.TEXT;
            return _this;
        }

        _createClass(TextNode, [{
            key: 'render',
            value: function render() {
                return this._text || '';
            }
        }]);

        return TextNode;
    }(_iomnode.IomNode);

    ;
});
define([], function () {});